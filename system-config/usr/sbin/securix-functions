#!/bin/bash

#: title: Securix GNU/Linux functions
#: file: /usr/sbin/securix-functions
#: desc: Securix shared functions
#: author: Martin Cmelik (cm3l1k1) - securix.org, security-portal.cz
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

##############################################################################
#
# VARIABLES
#
##############################################################################
SECURIXVERSION="20150228"
SECURIXPATCHSUM=""
SECURIXVAR="/var/securix"
SECURIXLOG="/var/log/securix.log"
SECURIXUPDATE="https://update.securix.org"
SECURIXUPDATEDR="https://securix.sourceforge.net"
# for statistics only, contains hash of "ifconfig -a" output
SECURIXID=""

LOCKFILE="/root/securix.lock"
GNUPGHOME="/etc/portage/gpg"
txtred='\e[0;31m'
txtblue='\e[1;34m'
txtgreen='\e[0;32m'
txtwhite='\e[0;37m'
txtyellow='\e[0;33m'
txtdefault='\e[00m'

# check if script is running interactively or not
if [ -t 0 -a "${TERM}" != "dumb" ]; then
    INTERACTIVE="yes"
else
    INTERACTIVE="no"
fi

##############################################################################
#
# TRAP
#
##############################################################################

# end script in case of error
# exception: if statement, until and while loop, logical AND (&&) or OR (||)
# trap also those exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR
trap exit_on_error 1 2 3 15 ERR

exit_on_error() {
    local exit_status=${1:-$?}
    echo -e "${txtred}--- Exiting ${0} with status: ${exit_status} ${txtdefault}"
    echo "--- Error occured ($(date '+%F %T')) in ${0} with status/on line: ${exit_status}; parent process: ${$} ($(cat /proc/$$/cmdline)); pipe: ${PIPESTATUS}; ssh client: ${SSH_CLIENT}" >> "${SECURIXLOG}"
    if [ -d "/var/sx-temp.${TEMPDIR##*.}" ]; then
        rm -rf "/var/sx-temp.${TEMPDIR##*.}"
    fi
    if [ -r "${LOCKFILE}" ]; then
        rm -f "${LOCKFILE}"
    fi
    exit "${exit_status}"
}

##############################################################################
#
# FUNCTIONS
#
##############################################################################

f_loadsecurixconf() {
    # load securix configuration file and export variables
    if [ ! -r "/etc/securix/securix.conf" ]; then
        echo "--- PROBLEM: /etc/securix/securix.conf doesnt exist!!"
        logger "CRITICAL: /etc/securix/securix.conf doesnt exist!!"
        exit 1
    fi

    SECURIXCONFIG="$(grep -vE '^$|^#|&|;' /etc/securix/securix.conf | grep -E '^SX_')"
    if [ -z "${SECURIXCONFIG}" ]; then
        echo "--- PROBLEM: Unable to load /etc/securix/securix.conf !!"
        logger "CRITICAL: Unable to load /etc/securix/securix.conf !!"
        exit 1
    fi
    # export securix variables
    for sxvar in ${SECURIXCONFIG}; do
        export "${sxvar}"
    done
}

f_msg() {
    #example: f_msg info "This is info message"
    case "${1}" in
        error) echo -e "${txtred}${2} ${txtdefault}" ;;
        warn) echo -e "${txtyellow}${2} ${txtdefault}" ;;
        info) echo -e "${txtgreen}${2} ${txtdefault}" ;;
        newline) echo "" ;;
        *) echo "${1} ${2}" ;;
    esac
}

f_yesno() {
    #example: f_yesno "Are you sure?" variable
    local answer
    echo -ne "${txtblue}-- Q: ${1} (yes/NO): ${txtdefault}"
    read answer
    case "${answer}" in
        y|Y|yes|YES|Yes) yesno="yes" ;;
        *) yesno="no" ;;
    esac
    if [ ! -z "${2}" ]; then
        eval "${2}"="${yesno}"
    fi
}

f_getvar() {
    #example: f_getvar "Your name?" variable "default value"
    local answer
    echo -ne "${txtblue}-- Q: ${1} ${txtdefault}"
    read answer
    #set default when null
    if [ -z "${answer}" ]; then
        local defaultvar=${3:?"Error answer and default value is null"}
        eval "${2}"="${3}"
    else
        eval "${2}"="${answer}"
    fi
}

f_getpass() {
    #example: f_getpass "Service password:" variable "default value"
    local answer
    echo -ne "${txtblue}-- ${1} ${txtdefault}"
    read -s -p "" answer
    f_msg newline
    #set default when null
    if [ -z "${answer}" ]; then
        local defaultvar=${3:?"Error answer and default value is null"}
        eval "${2}"="${3}"
    else
        eval "${2}"="${answer}"
    fi
}

f_grep() {
    #example: f_grep " ept " /proc/cpuinfo EPTFLAG
    #if string exist 3rd parameter have value "yes"
    grep "${1}" "${2}" > /dev/null
    if [ "${?}" -eq "0" ]; then
        export "${3}"="yes"
    else
        export "${3}"="no"
    fi
}

f_validip() {
    #example: f_validip 1.2.3.4
    #validate IP address format
    ip="${1}"
    local IFS='.'
    # set IP as positional parameter for each oktet
    set -- "${ip}"
    # check that IP contain only numbers and dots
    if [[ "${ip}" =~ "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" ]]; then

        # check each positional parameter
        if [[ "${1}" -le "255" && "${2}" -le "255" && "${3}" -le "255" && "${4}" -le "255" ]]; then
            VALIDIP="yes"
        else
            VALIDIP="no"
        fi
    else
        VALIDIP="no"
    fi
}

f_mktemp() {
    #example: f_mktemp
    #creates temp dir, temp files should be inside
    TEMPDIR="$(mktemp -d /tmp/sx-temp.XXXXXXXXXXXXXXXXXX${RANDOM}${RANDOM})"
    TMPDIR="${TEMPDIR}"
}

f_download() {
    #usage: f_download $link $backup-link
    #example: f_download https://x.y.z/file.tgz https://mirror.x.y.z/file.tgz
    if [ -z "${1}" ]; then
        echo "--- Error: No URL provided"
    fi
    # propagate error code in pipelines
    set -o pipefail
    local downlink="${1}"
    local backuplink="${2}"
    local downfile="${downlink##*/}"
    local backupfile="${backuplink##*/}"
    local wgeterror="no"
    # remove parameters from link
    downfile="${downfile%%\?*}"
    backupfile="${backupfile%%\?*}"
    # remove previous files if any
    rm -f "${downfile}" "${backupfile}"
    echo "Downloading: ${downlink}"
    echo -n "Status:     "
    wget --timeout=30 --secure-protocol="PFS" --https-only --no-cache --progress=dot -O "${downfile}" "${downlink}" 2>&1 | grep --line-buffered "%" | \
        sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    if [ "${?}" -ne "0" ]; then
        wgeterror="yes"
    fi
    echo " DONE"
    if [ -f "${downfile}" -a "${wgeterror}" = "no" ]; then
        downloaded="yes"
        return 0
    else
        wgeterror="no"
        if [ ! -z "${backuplink}" ]; then
            echo "Downloading from mirror: ${backuplink}"
            echo -n "Status:     "
            wget --timeout=30 --secure-protocol="PFS" --https-only --no-cache --progress=dot -O "${backupfile}" "${backuplink}" 2>&1 | grep --line-buffered "%" | \
                sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
            if [ "${?}" -ne "0" ]; then
                wgeterror="yes"
            fi
            echo " DONE"
            if [ -f "${backupfile}" -a "${wgeterror}" = "no" ]; then
                downloaded="yes"
                return 0
            else
                downloaded="no"
                return 1
            fi
        else
            downloaded="no"
            return 1
        fi
    fi
}

f_updatepackage() {
    #example: f_updatepackage $ebuild-name
    ls -d /var/db/pkg/*/* | cut -f5- -d/ | grep "${1}"
    if [ "${?}" -ne "0" ]; then
        f_msg error "--- Package ${1} doesn't exist in system"
        exit 1
    fi
    emerge -p "${1}" | grep "${1}" | grep "ebuild     U  " >/dev/null
    if [ "${?}" -eq "0" ]; then
        emerge --quiet "${1}"
        return 0
    else
        f_msg info "--- No update available/needed"
        return 1
    fi
}

f_updateportage() {
    f_msg info "###-### Syncing portage ---"
    emerge-webrsync --quiet
    if [ "${?}" -ne "0" ]; then
        f_msg warn "--- Problem detected during emerge-webrsync, trying rsync..."
        emerge --sync --quiet
        if [ "${?}" -ne "0" ]; then
            f_msg error "--- Unable to update portage !!"
            exit 1
        fi
    fi
    f_updatepackage portage
    f_updatepackage gentoolkit
}

f_printbanner() {
    echo -e "
   _________                                         __
  /   _____/   ____    ______   __  __  _________   |__| ___  ___
  \_____  \   / __ \  /  ____| |  ||  | \_  ___  \  |  | \  \/  /
  ______|  \ |  ___/  \  \___  |  ||  |  |  |_/  /  |  |  > || <
 /_________/  \_____\  \_____| |_____/   |__| |__\  |__| /__/\__\\
\n
::: Securix GNU/Linux - secured by default
::: www.securix.org
"
}

# check Securix VAR directory
if [ ! -d "${SECURIXVAR}" -a "${EUID}" -eq "0" ]; then
    mkdir -p "${SECURIXVAR}"
    chmod 0655 "${SECURIXVAR}"
    chown root:admin "${SECURIXVAR}"
    echo "--- PROBLEM: Securix VAR directory created" >> "${SECURIXLOG}"
    logger "WARNING: Securix VAR directory created"
fi
