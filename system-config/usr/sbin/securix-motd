#!/bin/bash

#: title: Securix GNU/Linux motd script
#: file: /usr/sbin/securix-motd
#: description: Securix script executed when user login to interactive shell
#: warning: this script is executed also by standard users
#: author: Martin Cmelik (cm3l1k1) - securix.org, security-portal.cz
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

##############################################################################
#
# VARIABLES
#
##############################################################################

# get terminal width
width="$(tput cols)"
colnumber=0
countinfo=0
countwarning=0
countcritical=0
# set IFS as newline
SAVEIFS="${IFS}"
IFS="
"
SECURIXVAR="/var/securix"

# unset trap - in case of failure user will not be able to login
trap - 1 2 3 15 ERR

##############################################################################
#
# FUNCTIONS
#
##############################################################################

f_append() {
    #usage: f_append character number
    #example: f_append "%" 20
    unset APPEND
    APPEND="${1:-@}"
    while [ "${#APPEND}" -lt "${2}" ]; do
        APPEND="${APPEND}${APPEND}${APPEND}"
    done
    # trim to appropriate size
    APPEND="${APPEND:0:$2}"
}


#
# Generate MOTD
#

f_generate_motd() {
    # check permission level
    for group in "${GROUPS[@]}"; do
        if [ "${group}" -eq "0" ]; then
            permission="Root"
        elif [ "${group}" -eq "111" ]; then
            permission="Admin"
        elif [ "${group}" -eq "222" -a "${permission}" != "Admin" ]; then
            permission="Operator"
        elif [ -z "${permission}" ]; then
            permission="User"
        fi
    done

    # check cron
    unset cronstatus
    cronstatus="$(find "${SECURIXVAR}/securix.cron" -mmin +90 2>/dev/null)"
    if [ ! -z "${cronstatus}" ]; then
        cronstatus="PROBLEM"
    else
        cronstatus="OK"
    fi

    # check disk space/inode
    if [ -s "${SECURIXVAR}/disk-space.critical" -o -s "${SECURIXVAR}/inode-space.critical" ]; then
        diskstatus="PROBLEM"
    else
        diskstatus="OK"
    fi

    # check securix-mailer status
    if [ -s "${SECURIXVAR}/securix-mailer.critical" ]; then
        mailerstatus="PROBLEM"
    else
        mailerstatus="OK"
    fi

    # check services
    if [ -r "${SECURIXVAR}/rc-status.warning" ]; then
        servicestatus="PROBLEM"
    else
        servicestatus="OK"
    fi

    # get system load
    systemload="$(awk '{ print $1" "$2" "$3 }' /proc/loadavg)"

    # get last reboot
    lastreboot="$(uptime | awk -F'( |,)' '{print $4" "$5" "$6 $7}')"

    # generate motd data file
    echo "
Hostname: ${HOSTNAME}
Kernel: $(uname -r)
Load: ${systemload}
Last reboot: ${lastreboot}
Permission level: ${permission}
Disk space: ${diskstatus}
Cron: ${cronstatus}
Mailer: ${mailerstatus}
Services: ${servicestatus}
" > ~/securix.motd
}

# motd messages for operators/admin only
f_operatormotd() {
    # check securix update
    if [ -r "${SECURIXVAR}/securix.update" ]; then
    	securixupdate="update available!"
    else
    	securixupdate="up-to-date"
    fi

    # check for affected GLSA
    if [ -r "${SECURIXVAR}/glsa-check.critical" ]; then
        securixglsa="PROBLEM"
    else
        securixglsa="OK"
    fi

    # check Rkhunter
    if [ -r "${SECURIXVAR}/rkhunter.warning" ]; then
        rkhunter="PROBLEM"
    else
        rkhunter="OK"
    fi

    # sum system alerts
    for info in ${SECURIXVAR}/*.info; do
        if [ "${info}" = "${SECURIXVAR}/*.info" ]; then
            countinfo="0"
        else
            ((countinfo++))
        fi
    done

    for warning in ${SECURIXVAR}/*.warning; do
        if [ "${warning}" = "${SECURIXVAR}/*.warning" ]; then
            countwarning="0"
        else
            ((countwarning++))
        fi
    done

    for critical in ${SECURIXVAR}/*.critical; do
        if [ "${critical}" = "${SECURIXVAR}/*.critical" ]; then
            countcritical="0"
        else
            ((countcritical++))
        fi
    done

    # check Grsecurity RBAC system
    /sbin/gradm --status | grep enabled > /dev/null 2>&1
    if [ "${?}" -eq "0" ]; then
        rbacstatus="Enabled"
    else
        rbacstatus="Disabled"
    fi

    # update motd messages
    echo "
Securix: ${securixupdate}
Security updates: ${securixglsa}
Rkhunter: ${rkhunter}
Grsecurity RBAC: ${rbacstatus}
Alerts: Info(${countinfo}) Warn(${countwarning}) Critical(${countcritical})

" >> ~/securix.motd
}

#
# Print MOTD section
#

f_print_motd() {
    # max line lenght
    maxsize="$(wc -L ~/securix.motd)"
    maxsize="${maxsize%% *}"

    # get number of possible columns
    columns="$((width / (maxsize + 4)))"
    # get number of characters per column
    chars="$((width / columns))"

    # print motd header
    motdheader="=== Securix - hardened linux "
    fill="$((width - ${#motdheader}))"
    f_append "=" "${fill}"
    echo "${motdheader}${APPEND}"
    motdheader="| Welcome, ${USER^}"
    fill="$((width - (${#motdheader} + 1)))"
    f_append " " "${fill}"
    echo "${motdheader}${APPEND}|"
    fill="$((width - 2))"
    f_append " " "${fill}"
    echo "|${APPEND}|"

    # print motd body in columns
    for motdbody in $(cat ~/securix.motd); do
        size="${#motdbody}"
        if [ "${size}" -lt "${chars}" ]; then
            # +4 because "| MSG  "
            fill="$((chars - (size + 4)))"
            f_append " " "${fill}"
            echo -n "| ${motdbody}${APPEND}"
            ((colnumber++))
            if [ "${colnumber}" -eq "${columns}" ]; then
                fill="$((width - (columns * chars)))"
                f_append " " "${fill}"
                echo "${APPEND} |"
                colnumber="0"
            else
            	echo -n "  "
            fi
        fi
    done

    # finish last line
    if [ "${colnumber}" -ne "0" ]; then
        # number of columns left to end of line
        fill="$(((columns - colnumber) * chars))"
        f_append " " "${fill}"
        echo "${APPEND} |"
    fi

    # print system limits on separate line
    motdlimits="| Limits: $(ulimit -a | grep -vE '\) 0|unlimited' | grep -E '\-n|\-u|\-f' | cut -d'(' -f2 | cut -d',' -f2 | \
       sed 's/)//g;s/-n/open files:/g;s/-u/max processes:/g;s/-f/file size:/g' | awk '{ printf ("%s ",$0) }' )"
    fill="$((width - (${#motdlimits} + 1)))"
    f_append " " "${fill}"
    echo "${motdlimits}${APPEND}|"

    # print motd footer
    fill="$((width - 2))"
    f_append " " $fill
    echo "|${APPEND}|"
    motdfooter="| Run \"securix status\" for more information about issues found in system"
    fill="$((width - (${#motdfooter} + 1)))"
    f_append " " "${fill}"
    echo "${motdfooter}${APPEND}|"
    motdfooter="...==="
    fill="$((width - ${#motdfooter}))"
    f_append "=" "${fill}"
    echo "${APPEND}${motdfooter}"
}

#
# MAIN
#

# find if user is member of motd group
unset MOTD
for group in "${GROUPS[@]}"; do
    if [ "${group}" -eq "555" ]; then
        MOTD="yes"
    fi
done

# execute only if user is member of motd group and session is interactive
# detection of interactive shell is done in /etc/profile.d/sx-motd.sh
if [ "${MOTD}" = "yes" -a "${INTERACTIVE}" = "yes" ]; then
    # generate motd file
    f_generate_motd
    # if user is member of privileged group add additional information
    if [ "${permission}" = "Admin" -o "${permission}" = "Operator" -o "${EUID}" -eq "0" ]; then
        f_operatormotd
    fi
    # finally print motd
    f_print_motd
    rm ~/securix.motd
fi

# end
IFS="${SAVEIFS}"
