#!/bin/bash

#: title: Securix GNU/Linux Monitor script
#: file: /usr/sbin/securix-monitor
#: description: Securix Monitor script executed by cron
#: This script monitor system health, security, setup and save status into files
#: located in $SECURIXVAR. Reporting is done by securix-mailer and securix-motd
#: This script is dependent on error codes, so do not use error trap
#: author: Martin Cmelik (cm3l1k1) - securix.org, security-portal.cz
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

##############################################################################
#
# VARIABLES
#
##############################################################################


##############################################################################
#
# FUNCTIONS
#
##############################################################################

# load securix functions
if [ ! -r "/usr/sbin/securix-functions" ]; then
    logger "CRITICAL: /usr/sbin/securix-functions doesnt exist!!"
    echo "CRITICAL: /usr/sbin/securix-functions doesnt exist!!"
    exit 1
else
    . /usr/sbin/securix-functions
fi

##############################################################################
#
# Basic steps
#
##############################################################################

# check permissions
if [ "${EUID}" -ne "0" ]; then
    f_msg error "This script must be run as root or via sudo"
    exit 1
fi

# avoid interactive executing
if [ "${INTERACTIVE}" = "yes" ]; then
    f_msg error "--- Error: this script must be executed by cron and shouldn't run interactively"
    exit 1
fi

# load Securix config
f_loadsecurixconf

# init log
echo "=== Securix monitor START ($(date '+%F %T')), type: ${1}, id: ${$}" >> "${SECURIXLOG}"

##############################################################################
#
# Monitor - Hourly
#
##############################################################################

f_monitorhourly() {

# Check disk space, default SX_DISK_ALERT threshold is 90%
# delete monitor file before next run
rm -f "${SECURIXVAR}/disk-space.critical"
df -H -P | grep -vE "${SX_DISK_MONITORING_EXEMPTION}" | awk '{ print $5 " " $6 }' | while read DISKSPACE; do
    if [ ! -z "${DISKSPACE}" ]; then
        USEP=$(echo "${DISKSPACE}" | awk '{ print $1 }' | cut -d'%' -f1)
        PART=$(echo "${DISKSPACE}" | awk '{ print $2 }')
        if [ "${USEP}" -ge "${SX_DISK_ALERT}" ]; then
            echo "--- Running out of space on partition: \"${PART} (${USEP}%)\"" >> "${SECURIXVAR}/disk-space.critical"
        fi
    fi
done
if [ ! -s "${SECURIXVAR}/disk-space.critical" ]; then
    echo "--- OK: Disk space"
    rm -f "${SECURIXVAR}/disk-space.critical"
else
    echo "--- PROBLEM: Disk space reach critical threshold"
    # attach information about allocable size
    echo "--- Here is free space which you can allocate to partition by \"securix config lvm\":" >> "${SECURIXVAR}/disk-space.critical"
    vgdisplay | grep -E 'Free|Name|---' >> "${SECURIXVAR}/disk-space.critical"
fi

# Check inode free space, default SX_INODE_ALERT threshold is 95%
# delete monitor file before next run
rm -f "${SECURIXVAR}/inode-space.critical"
df -i | grep -vE "${SX_DISK_MONITORING_EXEMPTION}" | awk '{ print $5 " " $6 }' | while read INODESPACE; do
    if [ ! -z "${INODESPACE}" ]; then
        USEP=$(echo "${INODESPACE}" | awk '{ print $1 }' | cut -d'%' -f1)
        PART=$(echo "${INODESPACE}" | awk '{ print $2 }')
        if [ "${USEP}" -ge "${SX_INODE_ALERT}" ]; then
            echo "--- Running out of inode on partition: \"${PART} (${USEP}%)\"" >> "${SECURIXVAR}/inode-space.critical"
        fi
    fi
done
if [ ! -s "${SECURIXVAR}/inode-space.critical" ]; then
    echo "--- OK: Inode space"
    rm -f "${SECURIXVAR}/inode-space.critical"
else
    echo "--- PROBLEM: Inode space reach critical threshold"
fi

# Check if syslog is running
tail /var/log/messages | md5sum > "${SECURIXVAR}/syslog.hash.temp"
diff "${SECURIXVAR}/syslog.hash.temp" "${SECURIXVAR}/syslog.hash"
if [ "${?}" -eq "0" ]; then
    echo "--- PROBLEM: Syslog is not running!!"
    touch "${SECURIXVAR}/syslog.critical"
else
    echo "--- OK: Syslog is running"
    rm -f "${SECURIXVAR}/syslog.critical"
    mv "${SECURIXVAR}/syslog.hash.temp" "${SECURIXVAR}/syslog.hash"
fi

# Check status of interfaces assigned to bond
if [ -f /proc/net/bonding/bond* ]; then
    rm -f "${SECURIXVAR}/bonding.warning"
    for bonding in /proc/net/bonding/bond*; do
        grep "MII Status: down" "${bonding}"
        if [ "${?}" -eq "0" ]; then
            echo "There is problem with ${bonding}, MII status is down" >> "${SECURIXVAR}/bonding.warning"
        else
            echo "--- OK: Bond ${bonding}"
        fi
    done
fi

# Find processes and ports hiding in system
unhide procall sys reverse >/dev/null
if [ "${?}" -eq "0" ]; then
    echo "--- OK: No hidden processes found in system"
    rm -f "${SECURIXVAR}/hidden-proc.critical"
else
    echo "--- PROBLEM: Hidden process found in system!!"
    touch "${SECURIXVAR}/hidden-proc.critical"
fi

unhide-tcp -n >/dev/null
if [ "${?}" -eq "0" ]; then
    echo "--- OK: No hidden ports found in system"
    rm -f "${SECURIXVAR}/hidden-tcp.critical"
else
    echo "--- PROBLEM: Hidden ports found in system!!"
    touch "${SECURIXVAR}/hidden-tcp.critical"
fi

# Check entropy available bits, 112 is FIPS-140 requirement
ENTROPYSIZE="$(cat /proc/sys/kernel/random/entropy_avail)"
if [ "${ENTROPYSIZE}" -lt "112" ]; then
    echo "--- PROBLEM: You have low available entropy. It can potentially affect or DoS your server/service. Install rng-tools to temporary solve it"
    touch "${SECURIXVAR}/entropy.critical"
else
    echo "--- OK: You have enough entropy available"
    rm -f "${SECURIXVAR}/entropy.critical"
fi

# process new alerts
f_processalert

# at the end execute securix-mailer
/usr/sbin/securix-mailer hourly

} >> "${SECURIXLOG}" 2>&1

##############################################################################
#
# Monitor - Daily
#
##############################################################################

f_monitordaily() {

# Sync portage, update portage, update gentoolkit
f_msg info "###-### Syncing portage ---"
emerge-webrsync --quiet
if [ "${?}" -ne "0" ]; then
    echo "--- PROBLEM: Problem detected during emerge-webrsync, trying rsync..."
    emerge --sync --quiet
    if [ "${?}" -ne "0" ]; then
        echo "--- PROBLEM: Unable to update portage at all !!"
        touch "${SECURIXVAR}/portage.warning"
        exit_on_error
    fi
else
    echo "--- OK: Portage updated"
    rm -f "${SECURIXVAR}/portage.warning"
fi
f_updatepackage portage
f_updatepackage gentoolkit

# Check new version of Securix
f_download "${SECURIXUPDATE}/cgi-bin/current.py?sxver=${SECURIXVERSION}\&sxid=${SECURIXID}" "${SECURIXUPDATEDR}/cgi-bin/current.py?sxver=${SECURIXVERSION}\&sxid=${SECURIXID}"

LASTVERSION="$(<current.py)"
rm -f current.py

if [ "${SECURIXVERSION}" -eq "${LASTVERSION}" -a "${LASTVERSION}" != "" ]; then
    rm -f "${SECURIXVAR}/securix.update"
    echo "--- OK: Securix is up-to-date"
else
    echo "${LASTVERSION}" > "${SECURIXVAR}/securix.update"
    echo "--- INFO: New Securix update available - ${LASTVERSION}"
fi

# GLSA check
glsa-check -v -c --test all > "${SECURIXVAR}/glsa-check.critical"
if [ "${?}" -eq "0" ]; then
    rm -f "${SECURIXVAR}/glsa-check.critical"
    echo "--- OK: System is not affected by any known GLSA"
else
    echo "--- PROBLEM: System is affected by known GLSA!!"
fi

# Equery check - binary consistency
equery -N -C check -o '*' 2>"${SECURIXVAR}/equery.temp"
grep -v "does not exist" "${SECURIXVAR}/equery.temp" | cut -d' ' -f2 | xargs file | grep -E "ELF|executable|script" > "${SECURIXVAR}/equery.warning"
rm -f "${SECURIXVAR}/equery.temp"

if [ ! -s "${SECURIXVAR}/equery.warning" ]; then
    echo "--- OK: Equery check (binary consistency) is OK"
    rm -f "${SECURIXVAR}/equery.warning"
else
    echo "--- PROBLEM: Equery found system binary inconsistency!!"
fi

# Rkhunter check
grep -E "Warning|Error" /var/log/rkhunter.log > "${SECURIXVAR}/rkhunter.warning"
if [ "${?}" -ne "0" ]; then
    echo "--- OK: Rkhunter found nothing suspicious"
    rm -f "${SECURIXVAR}/rkhunter.warning"
else
    echo "--- PROBLEM: Rkhunter detect something suspicious!"
fi

# Check services
rc-status | grep -vE 'started|Runlevel' | awk '{ print $1 }' > "${SECURIXVAR}/rc-status.warning"
if [ "${?}" -eq "0" ]; then
    echo "--- OK: All services running"
    rm -f "${SECURIXVAR}/rc-status.warning"
else
    echo "--- PROBLEM: Some services defined in runlevels aren't runnning"
fi

# Check world writeable files and directories (exclude sticky directories, links, /proc and /dev)
find / ! \( -wholename '/proc/*' -prune -o -wholename '/dev/*' -prune \) -perm -o=w ! \( -type d -perm -o=t \) ! -type l > "${SECURIXVAR}/world-writeable.info"
if [ ! -z "${SX_WRITEABLE_EXEMPTIONS}" ]; then
    grep -vE "${SX_WRITEABLE_EXEMPTIONS}" "${SECURIXVAR}/world-writeable.info" > "${SECURIXVAR}/world-writeable.temp"
    mv "${SECURIXVAR}/world-writeable.temp" "${SECURIXVAR}/world-writeable.info"
fi
if [ ! -s "${SECURIXVAR}/world-writeable.info" ]; then
    rm -f "${SECURIXVAR}/world-writeable.info"
    echo "--- OK: No world writeable file or directory found"
else
    echo "--- PROBLEM: Some world writeable file/s or folder/s found"
fi

# Check if there doesnt exist new suid/sgid file
find / ! \( -wholename '/proc/*' -prune \) -perm -u=s -o -perm -g=s ! -type d | grep -vE "${SX_SUGID_EXEMPTIONS}" > "${SECURIXVAR}/suid-sgid.info"
if [ ! -z "${SX_SUGID_EXEMPTIONS}" ]; then
    grep -vE "${SX_SUGID_EXEMPTIONS}" "${SECURIXVAR}/suid-sgid.info" > "${SECURIXVAR}/suid-sgid.temp"
    mv "${SECURIXVAR}/suid-sgid.temp" "${SECURIXVAR}/suid-sgid.info"
fi
if [ ! -s "${SECURIXVAR}/suid-sgid.info" ]; then
    rm -f "${SECURIXVAR}/suid-sgid.info"
    echo "--- OK: No new suid or sgid file found"
else
    echo "--- PROBLEM: New suid or sgid file/s found"
fi

# Find files or diretories without existing user or group
find / ! \( -wholename '/proc/*' -prune \) -nouser -o -nogroup > "${SECURIXVAR}/no-owner.info"
if [ ! -s "${SECURIXVAR}/no-owner.info" ]; then
    rm -f "${SECURIXVAR}/no-owner.info"
    echo "--- OK: All files have existing owner and group"
else
    echo "--- PROBLEM: Found file/s without proper owner or group"
fi

# process new alerts
f_processalert

# at the end execute securix-mailer
securix-mailer daily

} >> "${SECURIXLOG}" 2>&1

##############################################################################
#
# Monitor - Weekly
#
##############################################################################

f_monitorweekly() {

    echo "--- OK: Nothing to check on week basis"

} >> "${SECURIXLOG}" 2>&1

##############################################################################
#
# Monitor - Monthly
#
##############################################################################

f_monitorweekly() {

    echo "--- OK: Nothing to check on month basis"

} >> "${SECURIXLOG}" 2>&1

##############################################################################
#
# Monitor - Problem description and solution
#
##############################################################################

f_processalert() {

    for alert in ${SECURIXVAR}/*; do
        grep -E '^#:' "${alert}" > /dev/null
        if [ "${?}" -ne "0" ]; then
            f_commentalert "${alert##*/}"
        fi
    done
}

f_commentalert() {

    # usage: f_commentalert trigger.severity
    trigger="#: Trigger: ${1%%.*}"
    severity="#: Severity: ${1##*.}"
    unset description solution

    case "${1}" in
        disk-space.critical)
            description="#: Description: It seems that you reach threshold for maximum disk space use which is ${SX_DISK_ALERT}%. Reaching 100% can corrupt your server/data."
            solution="#: Solution: Run \"securix config lvm\" and check if you can allocate more disk space to partition. Otherwise move or delete data."
            ;;
        inode-space.critical)
            description="#: Description: It seems that you reach threshold for maximum Inode use which is ${SX_INODE_ALERT}%. Reaching 100% can corrupt your server/data."
            solution="#: Solution: Ext4 can't increase inodes without re-creating filesystem (mkfs.ext4 -N <inode-number>). Use on this partition XFS or JFS, because they can dynamically extent inode allocation."
            ;;
        syslog.critical)
            description="#: Description: It seems that syslog daemon stop working because we don't see new events in /var/log/messages. Syslog is essential service and must be running properly."
            solution="#: Solution: Check last line in messages (what's happen), disk space and restart syslog (/etc/init.d/syslog-ng restart)."
            ;;
        glsa-check.critical)
            description="#: Description: We have found vulnerable applications installed on this server. It is highly recommended to install patched version ASAP."
            solution="#: Solution: Run \"securix install glsa\" or \"glsa-check --fix all\""
            ;;
        hidden-proc.critical)
            description="#: Description: We have found hidden processes running. This shouldn't happen especially on Securix, because it indicates rootkit. This might be bug as well, but needs to be clarified."
            solution="#: Solution: Find which process is that, go through logs and find who and when execute it. Run \"unhide procall sys reverse\" and visit Securix forum/wiki for more information."
            ;;
        hidden-tcp.critical)
            description="#: Description: We have found hidden listening ports on your server. This shouldn't happen especially on Securix. This might be service bug as well, but needs to be clarified."
            solution="#: Solution: Start sniffing commmunication, try connect on port and read banner (if any), try to identify which process is listening. Run \"unhide-tcp\" and visit Securix forum/wiki for more help."
            ;;
        entropy.critical)
            description="#: Description: You are almost out of available entropy (/dev/random). This can potentially affect or DoS your server. 112-bits is FIPS-140 required minimum of available entropy (cat /proc/sys/kernel/random/entropy_avail)"
            solution="#: Solution: Fastest temporary workaround is installation of package rng-tools which will feed /dev/random from /dev/urandom. Change in config \"HRNGDEVICE=/dev/urandom\" and start service. To solve this permanently buy RNG: entropykey.co.uk"
            ;;
        securix-mailer.critical)
            description="#: Description: Securix-mailer report problem when sending you an email with system alerts. This is serious issue and needs to be resolved."
            solution="#: Solution: Please go through /var/log/maillog and try to fix this issue. Mail alert is essential Securix reporting function."
            ;;
        portage.warning)
            description="#: Description: Server is unable to download portage. It means that server haven't information about latest applications and newest vulnerabilities which potentially exist in your system."
            solution="#: Solution: In most cases it is problem with Internet access or webproxy settings. Please update them accordingly (securix config proxy). If it is problem with mirror server run \"securix config mirror\" which will select mirror closer to your server."
            ;;
        bonding.warning)
            description="#: Description: At least one of your bond interface is down. There seems to hw issue with card or port on switch has been disabled."
            solution="#: Solution: Check if interface is glowing, check port status on switch or replace cables."
            ;;
        equery.warning)
            description="#: Description: Binary inconsistency has been detected. It means that some package have different checksum than before (after compilation). This can lead to potential infection."
            solution="#: Solution: Check mentioned files, run equery above them again and parse system logs if they not mention them. Run strings command with file path as parameter and check if it is really file which it should be. Otherwise run some forensic tools and identify root cause."
            ;;
        rc-status.warning)
            description="#: Description: Service which should be running after restart is not running now."
            solution="#: Solution: Check why service stop working, analyze logs. If it is normal state remove service from rc level (rc-update) to avoid this warning."
            ;;
        rkhunter.warning)
            description="#: Description: Rkhunter detect suspicious change in your system."
            solution="#: Solution: Rkhunter is tool designed for detecting rootkits and change in your system which may lead to compromise. If warnings below are normal or belongs to system/package update, please run \"rkhunter --propupd\" to record actual state."
            ;;
        world-writeable.info)
            description="#: Description: World writeable file or directory has been found. This is a security risk."
            solution="#: Solution: Change permission of file (chmod) or in case of directory setup sticky bit if it is really needed. You can also whitelist it in variable SX_WRITEABLE_EXEMPTIONS defined in securix.conf but I can't recommend this. Try to avoid this."
            ;;
        suid-sgid.info)
            description="#: Description: New suid/sgid file has been detected. This regularly happen when you install new package which contain file with this permission. Otherwise someone create script with suid/sgid bit."
            solution="#: Solution: If it is not essentialy needed remove this bit (chmod) because it can be security risk. It is always good habbit to keep lowest number of suid/sgid files in your system."
            ;;
        no-owner.info)
            description="#: Description: There exist files in your system which haven't existing owner. This can happen when you delete user/group which still own some files outside of /home."
            solution="#: Solution: Change ownership of mentioned files (chown) or delete them."
            ;;
        securix.update)
            description="#: Description: There is new version of Securix control scripts."
            solution="#: Solution: Install newest version by running: securix update"
            ;;
        securix.cron|securix.mailer|securix.monitor|syslog.hash)
            # do nothing
            ;;
        *)
            echo "--- No description available for ${1}"
            ;;
    esac

    # only if it is known file/trigger
    if [ ! -z "${description}" -o ! -z "${solution}" ]; then
        echo -e "${trigger}\n${severity}\n${description}\n${solution}\n" >> "${SECURIXVAR}/${1}"
    fi
}

##############################################################################
#
# MAIN
#
##############################################################################

case "${1}" in
    hourly) TYPE="${1}"; f_monitorhourly
        ;;
    daily) TYPE="${1}"; f_monitordaily
        ;;
    weekly) TYPE="${1}"; f_monitorweekly
        ;;
    monthly) TYPE="${1}"; f_monitormonthly
        ;;
    *)
        echo "Error: Invalid parameter ${1}"
        exit
        ;;
esac

##############################################################################
#
# Monitor - End
#
##############################################################################

# touch securix cron file, one has to be deleted XXXXXXXXXX
touch "${SECURIXVAR}/securix.cron"
touch "${SECURIXVAR}/securix.monitor"

echo "=== Securix monitor END ($(date '+%F %T')), type: ${1}, id: $$" >> "${SECURIXLOG}"
exit
